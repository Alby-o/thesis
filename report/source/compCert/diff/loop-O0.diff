2c2
< # Command line: loop.c -S -O0 -o compCert/out/loop-O0.s
---
> # Command line: loop.c -O0 -S
14a15,28
> .L101:
> 	xorl	%edx, %edx
> 	xorl	%edi, %edi
> .L102:
> .L103:
> .L104:
> 	nop
> .L105:
> .L106:
> .L107:
> 	nop
> .L108:
> .L109:
> .L110:
21c35
< 	leal	0(,%eax,2), %esi
---
> 	leal	0(,%eax,2), %edi
23c37
< 	subl	%esi, %ecx
---
> 	subl	%edi, %ecx
25c39,40
< 	jne	.L100
---
> 	jne	.L108
> 	movl	x(%rip), %edi
27c42
< 	jmp	.L100
---
> 	jmp	.L105
30a46,103
> 	.section	"__compcert_ais_annotations","",@note
> 	.ascii "# file:loop.c line:7 function:main\n"
> 	.byte 7,8
> 	.quad .L100
> 	.ascii " L(mem("
> 	.byte 7,8
> 	.quad z
> 	.ascii ", 4)) = true\n"
> 	.ascii "# file:loop.c line:8 function:main\n"
> 	.byte 7,8
> 	.quad .L101
> 	.ascii " L(mem("
> 	.byte 7,8
> 	.quad x
> 	.ascii ", 4))= mem("
> 	.byte 7,8
> 	.quad z
> 	.ascii ", 4) % 2 == 0\n"
> 	.ascii "# file:loop.c line:11 function:main\n"
> 	.byte 7,8
> 	.quad .L102
> 	.ascii " L(reg(\"rdi\"))= false\n"
> 	.ascii "# file:loop.c line:14 function:main\n"
> 	.byte 7,8
> 	.quad .L103
> 	.ascii " _P_0: reg(\"rdx\") % 2 == 0\n"
> 	.ascii "# file:loop.c line:15 function:main\n"
> 	.byte 7,8
> 	.quad .L104
> 	.ascii " _Gamma_0: reg(\"rdx\") -> LOW, reg(\"rdi\") -> LOW\n"
> 	.ascii "# file:loop.c line:19 function:main\n"
> 	.byte 7,8
> 	.quad .L106
> 	.ascii " _invariant: reg(\"rdx\") % 2 == 0 & reg(\"rdx\") <= mem("
> 	.byte 7,8
> 	.quad z
> 	.ascii ", 4)\n"
> 	.ascii "# file:loop.c line:20 function:main\n"
> 	.byte 7,8
> 	.quad .L107
> 	.ascii " _Gamma: reg(\"rdx\") -> LOW, reg(\"rdi\") -> (reg(\"rdx\") == mem("
> 	.byte 7,8
> 	.quad z
> 	.ascii ", 4)), mem("
> 	.byte 7,8
> 	.quad z
> 	.ascii ", 4) -> LOW\n"
> 	.ascii "# file:loop.c line:22 function:main\n"
> 	.byte 7,8
> 	.quad .L109
> 	.ascii " _invariant: reg(\"rdx\") <= mem("
> 	.byte 7,8
> 	.quad z
> 	.ascii ", 4)\n"
> 	.ascii "# file:loop.c line:23 function:main\n"
> 	.byte 7,8
> 	.quad .L110
> 	.ascii " _Gamma: reg(\"rdx\") -> LOW\n"
